version: 2
aliases:
  - &google-sdk-container-config
    docker:
      - image: google/cloud-sdk:latest
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD
  - &GCP-auth-docker
    name: GCP authentication with docker
    command: |
      echo $DOCKER_PASSWORD > ${HOME}/account-auth.json
  - &jfrog-login
    name: Rename jfrog environment variable for maven setting.xml
    command: |
      echo "export JFROG_USER=$ARTIFACTORY_USER"  >> $BASH_ENV
      echo "export JFROG_PASS=$ARTIFACTORY_PASSWORD"  >> $BASH_ENV
  - &tag-git-version
    name: Tag git commit with build version and push to github
    command: |
      git config --global user.email "circleci@entur.no"
      git config --global user.name "circleci"
      git tag $VERSION
      git push origin $VERSION
  - &create-image-version
    name: Create new image version and store to env var and as file in workspace
    command: |
      echo "export VERSION=$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)"  >> $BASH_ENV
      echo "$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)" > version
  - &read-image-version
    name: Read new image version from workspace
    command: |
      echo "export VERSION=$(cat ./version)" >> $BASH_ENV
  - &docker-build-and-push
    name: Docker build and push
    command: |
      IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
      echo "Image: ${IMAGE}"
      docker build -t $IMAGE .
      docker tag $IMAGE "${IMAGE}":"${VERSION}"
      docker login -u _json_key --password-stdin https://eu.gcr.io < ${HOME}/account-auth.json
      docker push "${IMAGE}":"${VERSION}"
  - &sonar-scan
    name: Sonar scan
    command: |
      mvn -s .circleci/settings.xml \
        org.jacoco:jacoco-maven-plugin:prepare-agent verify \
        org.jacoco:jacoco-maven-plugin:report sonar:sonar \
        -P prettierSkip \
        -Dmaven.main.skip \
        -DskipTests \
        -Dsonar.projectKey=entur_${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.organization=${SONAR_ORG} \
        -Dsonar.projectName=${CIRCLE_PROJECT_REPONAME} \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.token=${ENTUR_SONAR_PASSWORD}
jobs:
  build:
    machine:
      image: ubuntu-2204:2024.04.3
    environment:
      MAVEN_OPTS: -Xmx3G
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-v2-{{ checksum "pom.xml" }}
            - dep-cache-v2-
      - run:
          name: Download Maven settings
          command: wget https://raw.githubusercontent.com/entur/circleci-toolbox-image-java11/master/tools/m2/settings.xml -O .circleci/settings.xml
      - run: *jfrog-login
      - run:
          name: Refresh cache
          command: mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.0:go-offline -s .circleci/settings.xml
      - save_cache:
          paths:
            - ~/.m2
          key: dep-cache-v2-{{ checksum "pom.xml" }}
      # Cannot use -o because of snapshot dependencies.
      - run:
          name: Run Maven verify
          command: mvn verify -s .circleci/settings.xml -Dprettier.nodePath=node -Dprettier.npmPath=npm
      - run: *sonar-scan
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*dumpstream" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*log" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - run: *create-image-version
      - run: *tag-git-version
      - persist_to_workspace:
          root: ~/project
          paths:
            - target
            - Dockerfile
            - .circleci
            - ./version
  deploy-docker:
    <<: *google-sdk-container-config
    steps:
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run: *GCP-auth-docker
      - run: *read-image-version
      - run: *docker-build-and-push
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context: global
      - deploy-docker:
          context: global
          requires:
            - build
          filters:
            branches:
              only: master
